VERSION 0.6
ARG CODECS_INSTALL_PREFIX="/opt/codecs"

base-image:
    ARG --required OS_TARGET
    ARG BRANCH
    FROM busybox
    ARG DATE=$(date +%Y%m%d)
    FROM +barebones-${OS_TARGET}
    COPY +libjpeg-turbo/codecs ${CODECS_INSTALL_PREFIX}
    COPY +libpng/codecs ${CODECS_INSTALL_PREFIX}
    COPY +libwebp/codecs ${CODECS_INSTALL_PREFIX}
    COPY --keep-ts +opencv/opencv /build/opencv

    IF [ -z "${BRANCH}" ]
        SAVE IMAGE omicsautomation.azurecr.io/pathds/earthly/base:${OS_TARGET}
        SAVE IMAGE omicsautomation.azurecr.io/pathds/earthly/base:${OS_TARGET}-${DATE}
    ELSE
        SAVE IMAGE --push omicsautomation.azurecr.io/pathds/earthly/base:${BRANCH}-${OS_TARGET}
        SAVE IMAGE --push omicsautomation.azurecr.io/pathds/earthly/base:${BRANCH}-${OS_TARGET}-${DATE}
    END


opencv:
    ARG --required OPENCV_VERSION
    ARG --required OS_TARGET
    FROM +prereqs-${OS_TARGET}
    DO +BUILD_OPENCV --OPENCV_VERSION=${OPENCV_VERSION}


libjpeg-turbo:
    ARG --required LIBJPEGTURBO_VERSION
    ARG --required OS_TARGET
    FROM +prereqs-${OS_TARGET}
    DO +BUILD_LIBJPEG_TURBO --LIBJPEGTURBO_VERSION=${LIBJPEGTURBO_VERSION} --CODECS_INSTALL_PREFIX=${CODECS_INSTALL_PREFIX}

libpng:
    ARG --required LIBPNG_VERSION
    ARG --required OS_TARGET
    FROM +prereqs-${OS_TARGET}
    DO +BUILD_LIBPNG --LIBPNG_VERSION=${LIBPNG_VERSION} --CODECS_INSTALL_PREFIX=${CODECS_INSTALL_PREFIX}

libwebp:
    ARG --required LIBWEBP_VERSION
    ARG --required OS_TARGET
    FROM +prereqs-${OS_TARGET}
    DO +BUILD_LIBWEBP --LIBWEBP_VERSION=${LIBWEBP_VERSION} --CODECS_INSTALL_PREFIX=${CODECS_INSTALL_PREFIX}

prereqs-alpine:
    ARG --required ALPINE_VERSION
    FROM alpine:${ALPINE_VERSION}
    DO +BUILD_ALPINE_PREREQ

prereqs-debian:
    ARG --required DEBIAN_VERSION
    FROM debian:${DEBIAN_VERSION}-slim
    DO +BUILD_DEBIAN_PREREQ

barebones-alpine:
    ARG --required ALPINE_VERSION
    FROM alpine:${ALPINE_VERSION}
    RUN apk add --no-cache zlib

barebones-debian:
    ARG --required DEBIAN_VERSION
    FROM debian:${DEBIAN_VERSION}
    RUN apt-get update && \
        apt-get install -y --no-install-recommends \
            zlib1g \
            wget && \
        rm -rf /var/lib/apt/lists/*

BUILD_ALPINE_PREREQ:
    COMMAND
    RUN apk add --no-cache \
            build-base \
            cmake \
            autoconf \
            automake \
            libtool \
            zlib-dev \
            linux-headers \
            openblas-dev \
            -t build-tools && \
        apk add --no-cache zlib

BUILD_DEBIAN_PREREQ:
    COMMAND
    RUN set -eux; \
        apt-get update; \
        apt-get install -y --no-install-recommends \
            build-essential \
            cmake \
            autoconf \
            automake \
            libtool \
            ca-certificates \
            zlib1g \
            zlib1g-dev \
            libopenblas-dev \
            wget

BUILD_LIBJPEG_TURBO:
    COMMAND
    ARG --required LIBJPEGTURBO_VERSION
    ARG --required CODECS_INSTALL_PREFIX
    GIT CLONE --branch tags/${LIBJPEGTURBO_VERSION} https://github.com/libjpeg-turbo/libjpeg-turbo.git libjpeg-turbo
    WORKDIR libjpeg-turbo
    RUN mkdir build && \
        env CFLAGS="-g0" cmake -Bbuild -DCMAKE_INSTALL_PREFIX=${CODECS_INSTALL_PREFIX} && \
        make -C build -j$(nproc) && \
        make -C build install && \
        cp jpegint.h ${CODECS_INSTALL_PREFIX}/include/jpegint.h && \
        rm -Rf ${CODECS_INSTALL_PREFIX}/share
    SAVE ARTIFACT ${CODECS_INSTALL_PREFIX} AS LOCAL codecs/libjpeg-turbo

BUILD_LIBPNG:
    COMMAND
    ARG --required LIBPNG_VERSION
    ARG --required CODECS_INSTALL_PREFIX
    GIT CLONE --branch tags/${LIBPNG_VERSION} https://github.com/glennrp/libpng.git libpng
    WORKDIR libpng
	RUN ./configure --prefix ${CODECS_INSTALL_PREFIX} && make install && \
        rm -Rf ${CODECS_INSTALL_PREFIX}/share
    SAVE ARTIFACT ${CODECS_INSTALL_PREFIX} AS LOCAL codecs/libpng

BUILD_LIBWEBP:
    COMMAND
    ARG --required LIBWEBP_VERSION
    ARG --required CODECS_INSTALL_PREFIX
    GIT CLONE --branch tags/${LIBWEBP_VERSION} https://github.com/webmproject/libwebp.git libwebp
    WORKDIR libwebp
	RUN ./autogen.sh && \
        ./configure --prefix ${CODECS_INSTALL_PREFIX} && \
        make install && \
        rm -Rf ${CODECS_INSTALL_PREFIX}/share
    SAVE ARTIFACT ${CODECS_INSTALL_PREFIX} AS LOCAL codecs/libwebp


BUILD_OPENCV:
    COMMAND
    ARG --required OPENCV_VERSION
    WORKDIR /build/
    ENV OPENCV_BUILD_OPTS="-D CMAKE_BUILD_TYPE=RELEASE \
        -D CMAKE_INSTALL_PREFIX=/opt/opencv "
    RUN wget https://github.com/opencv/opencv/archive/refs/tags/${OPENCV_VERSION}.tar.gz && \
        tar -xvf ${OPENCV_VERSION}.tar.gz && rm ${OPENCV_VERSION}.tar.gz && \
        mv opencv-${OPENCV_VERSION} opencv
    WORKDIR /build/opencv
    RUN mkdir build && cd build && \
        cmake .. \ 
            ${OPENCV_BUILD_OPTS} \
            -D BUILD_opencv_apps=OFF \
            -D BUILD_opencv_calib3d=OFF \
            -D BUILD_opencv_dnn=OFF \
            -D BUILD_opencv_gapi=OFF \
            -D BUILD_opencv_highgui=OFF \
            -D BUILD_opencv_java_bindings_generator=OFF \
            -D BUILD_opencv_flann=ON \
            -D BUILD_opencv_imgcodecs=OFF \
            -D BUILD_opencv_video=OFF \
            -D BUILD_opencv_videoio=OFF \
            -D BUILD_DOCS=OFF \
            -D BUILD_EXAMPLES=OFF \
            -D BUILD_OPENJPEG=OFF \
            -D BUILD_JPEG=OFF \
            -D BUILD_PNG=OFF \
            -D BUILD_WBP=OFF \
            -D BUILD_TIFF=OFF \
            -D BUILD_PACKAGE=OFF \
            -D BUILD_TESTS=OFF \
            -D BUILD_PERF_TESTS=OFF \
            -D WITH_TBB=NO \
            -D WITH_FFMPEG=NO \ 
            -D WITH_IPP=NO \
            -D WITH_JASPER=OFF \
            -D WITH_OPENEXR=OFF \
            -D WITH_OPENJPEG=OFF \
            -D WITH_JPEG=OFF \
            -D WITH_WEBP=OFF \
            -D WITH_PNG=OFF \
            -D WITH_TIFF=OFF \
        && make -j $(nproc) all
    SAVE ARTIFACT --keep-ts /build/opencv AS LOCAL opencv
